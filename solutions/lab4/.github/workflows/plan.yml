name: 'Terraform Plan (PR)'

on:
  pull_request:
    branches: [main]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/plan.yml'
      - '.github/workflows/apply.yml'

# Allow only one concurrent planning workflow
concurrency:
  group: terraform-plan-${{ github.head_ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

env:
  TF_VERSION: '1.7.5'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Copy Backend Configuration
        run: |
          cp environments/${{ matrix.environment }}/backend.tf .
          echo "Backend configuration for ${{ matrix.environment }}:"
          cat backend.tf

      - name: Terraform Init
        run: terraform init
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="${{ matrix.environment }}.tfvars" \
            -out="${{ matrix.environment }}.tfplan" \
            -detailed-exitcode
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        continue-on-error: true

      - name: Generate Plan Summary
        id: summary
        run: |
          # Create a summary of the plan
          terraform show -no-color ${{ matrix.environment }}.tfplan > plan_output.txt
          
          # Extract key information
          CHANGES=$(grep -E "(Plan:|No changes)" plan_output.txt || echo "Plan: Unknown changes")
          
          # Save plan summary for PR comment
          cat > plan_summary_${{ matrix.environment }}.md << 'EOF'
          ## 🏗️ Terraform Plan: ${{ matrix.environment }}
          
          **Plan Status:** ${{ steps.plan.outcome == 'success' && '✅ Success' || '❌ Failed' }}
          **Changes:** $CHANGES
          
          <details>
          <summary>📋 Show Plan Details</summary>
          
          ```hcl
          $(cat plan_output.txt)
          ```
          
          </details>
          
          ---
          EOF

      - name: Upload Plan Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: |
            ${{ matrix.environment }}.tfplan
            plan_output.txt
            plan_summary_${{ matrix.environment }}.md
          retention-days: 30

      - name: Set Plan Status
        run: |
          if [ "${{ steps.plan.outcome }}" == "success" ]; then
            echo "PLAN_STATUS=success" >> $GITHUB_ENV
          else
            echo "PLAN_STATUS=failed" >> $GITHUB_ENV
            exit 1
          fi

  comment:
    name: 'Comment PR'
    runs-on: ubuntu-latest
    needs: plan
    if: always() && github.event_name == 'pull_request'
    
    permissions:
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Plan Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: terraform-plan-*
          merge-multiple: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read plan summaries
            let comment = '# 🔄 Terraform Plan Results\n\n';
            comment += `**PR:** #${{ github.event.number }}\n`;
            comment += `**Commit:** ${{ github.event.pull_request.head.sha }}\n`;
            comment += `**Author:** @${{ github.event.pull_request.user.login }}\n\n`;
            
            const environments = ['staging', 'production'];
            
            for (const env of environments) {
              try {
                const summary = fs.readFileSync(`plan_summary_${env}.md`, 'utf8');
                comment += summary + '\n';
              } catch (error) {
                comment += `## ❌ ${env}\nFailed to generate plan\n\n`;
              }
            }
            
            comment += '\n---\n';
            comment += '**Note:** Plans are generated for both staging and production environments.\n';
            comment += 'Review carefully before merging this PR.\n';
            
            // Update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🔄 Terraform Plan Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
