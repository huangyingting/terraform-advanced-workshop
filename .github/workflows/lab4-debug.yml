name: "Lab4 Env Debug"

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths:
      - ".github/workflows/lab4-debug.yml"

jobs:
  debug:
    name: Inspect Environment / Secrets Presence
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [staging, production]
    environment: ${{ matrix.env }}
    concurrency:
      group: lab4-debug-${{ matrix.env }}
      cancel-in-progress: false
    permissions:
      contents: read
      pull-requests: read
      id-token: write
    env:
      DEPLOY_ENV: ${{ matrix.env }}
    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Selected Environment
        run: echo "Running matrix environment=${DEPLOY_ENV}"

      - name: Context Info
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Ref:        $GITHUB_REF"
          echo "Actor:      $GITHUB_ACTOR"
          echo "Event:      $GITHUB_EVENT_NAME"
          echo "Run ID:     $GITHUB_RUN_ID"
          echo "Matrix Environment: ${DEPLOY_ENV}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR Head Repo: ${{ github.event.pull_request.head.repo.full_name }}"
            echo "PR Base Repo: ${{ github.event.pull_request.base.repo.full_name }}"
            if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
              echo "::warning title=Fork Detected::This is a forked PR; repository secrets will NOT be available."
            fi
          fi

      - name: Check Required Secret / Env Variables
        env:
          # Secrets should be defined per GitHub Environment (staging / production) with identical names.
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TFSTATE_RESOURCE_GROUP_NAME: ${{ secrets.TFSTATE_RESOURCE_GROUP_NAME }}
          TFSTATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}
          TFSTATE_CONTAINER_NAME: ${{ secrets.TFSTATE_CONTAINER_NAME }}
        run: |
          echo "Verifying required variables for ${DEPLOY_ENV} (presence & length only)..."
          missing=0
          required=(
            AZURE_CLIENT_ID
            AZURE_TENANT_ID
            AZURE_SUBSCRIPTION_ID
            TFSTATE_RESOURCE_GROUP_NAME
            TFSTATE_STORAGE_ACCOUNT_NAME
            TFSTATE_CONTAINER_NAME
          )
          for v in "${required[@]}"; do
            val="${!v}"
            if [ -z "$val" ]; then
              echo "::error title=Missing::$v is NOT set (empty)"
              missing=$((missing+1))
            else
              echo "$v present (length=${#val})"
            fi
          done
          if [ $missing -gt 0 ]; then
            echo "::error title=Summary::$missing variable(s) missing."
            exit 1
          else
            echo "All required variables are present."
          fi

      - name: (Optional) Test Azure OIDC Login
        id: azure_login
        if: (success() && github.event_name != 'pull_request') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        uses: azure/login@v2
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Post-Login Sanity (Optional)
        if: steps.azure_login.outcome == 'success'
        run: |
          echo "Logged in (${DEPLOY_ENV}). Listing first 3 resource groups (if any)..."
          az group list --query '[].name' -o tsv | head -n 3 || true